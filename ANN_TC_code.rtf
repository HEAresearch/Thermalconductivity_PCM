{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green128\blue19;\red167\green9\blue245;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c50196\c7451;\csgenericrgb\c65490\c3529\c96078;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs20 \cf2 % Solve an Input-Output Fitting problem with a Neural Network\
% Script generated by Neural Fitting app\
% Created 06-Sep-2023 00:22:49\
%\
% This script assumes these variables are defined:\
%\
%   input - input data.\
%   target - target data.\
\
\cf0 x = input';\
t = target';\
\
\cf2 % Choose a Training Function\
% For a list of all training functions type: help nntrain\
% 'trainlm' is usually fastest.\
% 'trainbr' takes longer but may be better for challenging problems.\
% 'trainscg' uses less memory. Suitable in low memory situations.\
\cf0 trainFcn = \cf3 'trainlm'\cf0 ;  \cf2 % Levenberg-Marquardt backpropagation.\
\
% Create a Fitting Network\
\cf0 hiddenLayerSize = 10;\
net = fitnet(hiddenLayerSize,trainFcn);\
\
\cf2 % Setup Division of Data for Training, Validation, Testing\
\cf0 net.divideParam.trainRatio = 70/100;\
net.divideParam.valRatio = 15/100;\
net.divideParam.testRatio = 15/100;\
\
\cf2 % Train the Network\
\cf0 [net,tr] = train(net,x,t);\
\
\cf2 % Test the Network\
\cf0 y = net(x);\
e = gsubtract(t,y);\
performance = perform(net,t,y)\
\
\cf2 % View the Network\
\cf0 view(net)\
\
\cf2 % Plots\
% Uncomment these lines to enable various plots.\
%figure, plotperform(tr)\
%figure, plottrainstate(tr)\
%figure, ploterrhist(e)\
%figure, plotregression(t,y)\
%figure, plotfit(net,x,t)\
\
\
}